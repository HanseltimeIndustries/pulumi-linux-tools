import type * as pulumi from "@pulumi/pulumi";
import type { DockerComposeServiceArgs } from "../DockerComposeService";
import { DockerComposeService, } from "../DockerComposeService";
import { DefaultInternalNetworkRange } from "../DockerInstall";
import { DockerDeployType } from '../types'

interface CAdvisorServiceArgs {
    connection: DockerComposeServiceArgs["connection"]
    homeDir: DockerComposeServiceArgs["homeDir"]
    tmpCopyDir: DockerComposeServiceArgs["tmpCopyDir"]
	usernsRemap: DockerComposeServiceArgs['usernsRemap']
}

export class CAdvisorService extends DockerComposeService {
	constructor(
		name: string,
		args: CAdvisorServiceArgs,
		options: pulumi.ComponentResourceOptions,
	) {
        const dockerSocketProxyService = 'dockersocketproxy'
		super(name, {
			usernsRemap: args.usernsRemap,
			connection: args.connection,
			homeDir: args.homeDir,
			tmpCopyDir: args.tmpCopyDir,
			name: 'cadvisor',
			deployType: DockerDeployType.Replace,

			accessDockerSocket: {
				name: dockerSocketProxyService,
				readonly: true,
				apis: {
					CONTAINERS: 1,
                    INFO: 1,
                    VERSION: 1,
				},
				networkCIDR: DefaultInternalNetworkRange.get_24CIDR(2),
			},
			service: {
				image: "gcr.io/cadvisor/cadvisor:latest",
				ports: portsToExpose,
				restart: "unless-stopped",
				healthcheck: {
					test: pingPort.apply(
						(port) => `wget --spider 127.0.0.1:${port}/ping`,
					),
					// For now just use the defaults
				},
                command: [
                    `tcp://${dockerSocketProxyService}:2375`
                ],
                volumes: [
                    '/:/rootfs:ro',
                    '/var/run:/var/run:ro',
                    '/sys:/sys:ro',
                    '/var/lib/docker/:/var/lib/docker:ro',
                ]
				user: "ROOT_USER",
			},
		}, options);
	}
}
